# name: Backend CI/CD Pipeline
 
# on:
#   push:
#     branches: [main]  # Change to your branch name if needed

# env:
#   DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/lms-backend
#   SERVER_IP: ${{ secrets.SERVER_IP }}
#   SERVER_USER: ${{ secrets.SERVER_USER }}

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push backend image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./
#           platforms: linux/amd64,linux/arm64
#           push: true
#           tags: |
#             ${{ env.DOCKER_IMAGE }}:latest
#             ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Setup SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

#       - name: Deploy to server
#         run: |
#           ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
#             echo "Stopping existing backend container..."
#             sudo docker-compose down
#             echo "Removing old images..."
#             sudo docker system prune -af
#             echo "Pulling new backend image..."
#             sudo docker-compose pull backend
#             echo "Starting new backend container..."
#             sudo docker-compose up -d --force-recreate backend
#             echo "Backend deployment complete!"
#           '
name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Prepare Database
      run: |
        python -c "
import sqlite3
conn = sqlite3.connect('learning.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS user (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT NOT NULL,
                    password TEXT NOT NULL,
                    role TEXT NOT NULL
                  )''')
conn.commit()
conn.close()
        "

    - name: Run Tests and Generate Coverage Report
      run: |
        pytest --cov=./ --cov-report=xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.projectKey=YOUR_SONARCLOUD_PROJECT_KEY
          -Dsonar.organization=YOUR_SONARCLOUD_ORG
          -Dsonar.python.coverage.reportPaths=coverage.xml
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
